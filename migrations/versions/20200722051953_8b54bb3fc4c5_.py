"""Initialize tables

Revision ID: 8b54bb3fc4c5
Revises:
Create Date: 2020-07-22 05:19:53.735675

"""
import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '8b54bb3fc4c5'
down_revision = None
branch_labels = None
depends_on = None


ID_FUNC = 'uuid_generate_v4()'
MANAGER_FOREKEY_FIELD = 'manager.id'
ORG_FOREKEY_FIELD = 'organization.id'
USER_FOREKEY_FIELD = 'user.id'


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('manager',
                    sa.Column('id', postgresql.UUID(as_uuid=True), server_default=sa.text(
                        ID_FUNC), nullable=False),
                    sa.Column('created_at', postgresql.TIMESTAMP(),
                              server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
                    sa.Column('updated_at', postgresql.TIMESTAMP(),
                              server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
                    sa.Column('deleted_at', postgresql.TIMESTAMP(),
                              nullable=True),
                    sa.Column('username', sa.String(
                        length=255), nullable=False),
                    sa.Column('email', sa.String(length=255), nullable=False),
                    sa.Column('telephone', sa.String(
                        length=20), nullable=True),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('email'),
                    sa.UniqueConstraint('telephone'),
                    sa.UniqueConstraint('username')
                    )
    op.create_table('permission',
                    sa.Column('id', postgresql.UUID(as_uuid=True), server_default=sa.text(
                        ID_FUNC), nullable=False),
                    sa.Column('created_at', postgresql.TIMESTAMP(),
                              server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
                    sa.Column('updated_at', postgresql.TIMESTAMP(),
                              server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
                    sa.Column('deleted_at', postgresql.TIMESTAMP(),
                              nullable=True),
                    sa.Column('manage_member', sa.Boolean(),
                              server_default=sa.text('false'), nullable=False),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_table('social',
                    sa.Column('id', postgresql.UUID(as_uuid=True), server_default=sa.text(
                        ID_FUNC), nullable=False),
                    sa.Column('created_at', postgresql.TIMESTAMP(),
                              server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
                    sa.Column('updated_at', postgresql.TIMESTAMP(),
                              server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
                    sa.Column('deleted_at', postgresql.TIMESTAMP(),
                              nullable=True),
                    sa.Column('address', sa.String(length=255), nullable=True),
                    sa.Column('email', sa.String(length=255), nullable=True),
                    sa.Column('fan_page', sa.String(
                        length=255), nullable=True),
                    sa.Column('instagram', sa.String(
                        length=255), nullable=True),
                    sa.Column('line', sa.String(length=255), nullable=True),
                    sa.Column('telephone', sa.String(
                        length=20), nullable=True),
                    sa.Column('website', sa.String(length=255), nullable=True),
                    sa.Column('youtube', sa.String(length=255), nullable=True),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('email'),
                    sa.UniqueConstraint('fan_page'),
                    sa.UniqueConstraint('instagram'),
                    sa.UniqueConstraint('line'),
                    sa.UniqueConstraint('telephone'),
                    sa.UniqueConstraint('website'),
                    sa.UniqueConstraint('youtube')
                    )
    op.create_table('user',
                    sa.Column('id', postgresql.UUID(as_uuid=True), server_default=sa.text(
                        ID_FUNC), nullable=False),
                    sa.Column('created_at', postgresql.TIMESTAMP(),
                              server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
                    sa.Column('updated_at', postgresql.TIMESTAMP(),
                              server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
                    sa.Column('deleted_at', postgresql.TIMESTAMP(),
                              nullable=True),
                    sa.Column('username', sa.String(
                        length=255), nullable=False),
                    sa.Column('email', sa.String(length=255), nullable=False),
                    sa.Column('telephone', sa.String(
                        length=20), nullable=True),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('email'),
                    sa.UniqueConstraint('telephone'),
                    sa.UniqueConstraint('username')
                    )
    op.create_table('organization',
                    sa.Column('id', postgresql.UUID(as_uuid=True), server_default=sa.text(
                        ID_FUNC), nullable=False),
                    sa.Column('created_at', postgresql.TIMESTAMP(),
                              server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
                    sa.Column('updated_at', postgresql.TIMESTAMP(),
                              server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
                    sa.Column('deleted_at', postgresql.TIMESTAMP(),
                              nullable=True),
                    sa.Column('name', sa.String(length=255), nullable=False),
                    sa.Column('description', sa.Text(), nullable=True),
                    sa.Column('org_type', postgresql.ENUM('dance_group', 'studio',
                                                          name='org_type'), server_default='studio', nullable=False),
                    sa.Column('approved_at', postgresql.TIMESTAMP(),
                              nullable=True),
                    sa.Column('published_at',
                              postgresql.TIMESTAMP(), nullable=True),
                    sa.Column('creator_id', postgresql.UUID(
                        as_uuid=True), nullable=True),
                    sa.Column('approver_id', postgresql.UUID(
                        as_uuid=True), nullable=True),
                    sa.Column('social_id', postgresql.UUID(
                        as_uuid=True), nullable=True),
                    sa.ForeignKeyConstraint(
                        ['creator_id'], [USER_FOREKEY_FIELD], onupdate='CASCADE', ondelete='SET NULL'),
                    sa.ForeignKeyConstraint(
                        ['approver_id'], [MANAGER_FOREKEY_FIELD], onupdate='CASCADE', ondelete='SET NULL'),
                    sa.ForeignKeyConstraint(
                        ['social_id'], ['social.id'], onupdate='CASCADE', ondelete='SET NULL'),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('name')
                    )
    op.create_table('event',
                    sa.Column('id', postgresql.UUID(as_uuid=True), server_default=sa.text(
                        ID_FUNC), nullable=False),
                    sa.Column('created_at', postgresql.TIMESTAMP(),
                              server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
                    sa.Column('updated_at', postgresql.TIMESTAMP(),
                              server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
                    sa.Column('deleted_at', postgresql.TIMESTAMP(),
                              nullable=True),
                    sa.Column('name', sa.String(length=255), nullable=False),
                    sa.Column('description', sa.Text(), nullable=True),
                    sa.Column('start_at', postgresql.TIMESTAMP(),
                              nullable=True),
                    sa.Column('end_at', postgresql.TIMESTAMP(), nullable=True),
                    sa.Column('reg_link', sa.String(
                        length=128), nullable=True),
                    sa.Column('reg_start_at',
                              postgresql.TIMESTAMP(), nullable=True),
                    sa.Column('reg_end_at', postgresql.TIMESTAMP(),
                              nullable=True),
                    sa.Column('approved_at', postgresql.TIMESTAMP(),
                              nullable=True),
                    sa.Column('published_at',
                              postgresql.TIMESTAMP(), nullable=True),
                    sa.Column('creator_id', postgresql.UUID(
                        as_uuid=True), nullable=True),
                    sa.Column('approver_id', postgresql.UUID(
                        as_uuid=True), nullable=True),
                    sa.Column('org_id', postgresql.UUID(
                        as_uuid=True), nullable=False),
                    sa.Column('social_id', postgresql.UUID(
                        as_uuid=True), nullable=True),
                    sa.ForeignKeyConstraint(
                        ['creator_id'], [USER_FOREKEY_FIELD], onupdate='CASCADE', ondelete='SET NULL'),
                    sa.ForeignKeyConstraint(
                        ['approver_id'], [MANAGER_FOREKEY_FIELD], onupdate='CASCADE', ondelete='SET NULL'),
                    sa.ForeignKeyConstraint(
                        ['org_id'], [ORG_FOREKEY_FIELD], onupdate='CASCADE', ondelete='SET NULL'),
                    sa.ForeignKeyConstraint(
                        ['social_id'], ['social.id'], onupdate='CASCADE', ondelete='SET NULL'),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('name')
                    )
    op.create_table('ticket_fare',
                    sa.Column('id', postgresql.UUID(as_uuid=True), server_default=sa.text(
                        ID_FUNC), nullable=False),
                    sa.Column('created_at', postgresql.TIMESTAMP(),
                              server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
                    sa.Column('updated_at', postgresql.TIMESTAMP(),
                              server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
                    sa.Column('deleted_at', postgresql.TIMESTAMP(),
                              nullable=True),
                    sa.Column('name', sa.String(length=255), nullable=False),
                    sa.Column('description', sa.Text(), nullable=True),
                    sa.Column('amount', sa.Integer(),
                              server_default='0', nullable=False),
                    sa.Column('price', sa.Integer(),
                              server_default='0', nullable=False),
                    sa.Column('reg_link', sa.String(
                        length=128), nullable=True),
                    sa.Column('reg_start_at',
                              postgresql.TIMESTAMP(), nullable=True),
                    sa.Column('reg_end_at', postgresql.TIMESTAMP(),
                              nullable=True),
                    sa.Column('creator_id', postgresql.UUID(
                        as_uuid=True), nullable=True),
                    sa.Column('event_id', postgresql.UUID(
                        as_uuid=True), nullable=True),
                    sa.CheckConstraint('amount > -1'),
                    sa.CheckConstraint('price > -1'),
                    sa.ForeignKeyConstraint(
                        ['creator_id'], [USER_FOREKEY_FIELD], onupdate='CASCADE', ondelete='SET NULL'),
                    sa.ForeignKeyConstraint(
                        ['event_id'], ['event.id'], onupdate='CASCADE', ondelete='SET NULL'),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_table('request_member_log',
                    sa.Column('id', postgresql.UUID(as_uuid=True), server_default=sa.text(
                        ID_FUNC), nullable=False),
                    sa.Column('created_at', postgresql.TIMESTAMP(),
                              server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
                    sa.Column('updated_at', postgresql.TIMESTAMP(),
                              server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
                    sa.Column('deleted_at', postgresql.TIMESTAMP(),
                              nullable=True),
                    sa.Column('req_type', postgresql.ENUM('invite_member', 'invite_exist_member',
                                                          'remove_member', name='req_member_type'), server_default='invite_member', nullable=False),
                    sa.Column('email', sa.String(length=255), nullable=True),
                    sa.Column('org_id', postgresql.UUID(
                        as_uuid=True), nullable=False),
                    sa.Column('inviter_id', postgresql.UUID(
                        as_uuid=True), nullable=False),
                    sa.Column('invitee_id', postgresql.UUID(
                        as_uuid=True), nullable=True),
                    sa.Column('accepted_at', postgresql.TIMESTAMP(),
                              nullable=True),
                    sa.ForeignKeyConstraint(
                        ['invitee_id'], [USER_FOREKEY_FIELD], onupdate='CASCADE', ondelete='SET NULL'),
                    sa.ForeignKeyConstraint(
                        ['inviter_id'], [USER_FOREKEY_FIELD], onupdate='CASCADE', ondelete='SET NULL'),
                    sa.ForeignKeyConstraint(
                        ['org_id'], [ORG_FOREKEY_FIELD], onupdate='CASCADE', ondelete='SET NULL'),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_table('request_org_log',
                    sa.Column('id', postgresql.UUID(as_uuid=True), server_default=sa.text(
                        ID_FUNC), nullable=False),
                    sa.Column('created_at', postgresql.TIMESTAMP(),
                              server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
                    sa.Column('updated_at', postgresql.TIMESTAMP(),
                              server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
                    sa.Column('deleted_at', postgresql.TIMESTAMP(),
                              nullable=True),
                    sa.Column('req_type', postgresql.ENUM('apply_org', 'claim_org',
                                                          name='req_org_type'), server_default='apply_org', nullable=False),
                    sa.Column('org_id', postgresql.UUID(
                        as_uuid=True), nullable=False),
                    sa.Column('applicant_id', postgresql.UUID(
                        as_uuid=True), nullable=False),
                    sa.Column('approver_id', postgresql.UUID(
                        as_uuid=True), nullable=True),
                    sa.Column('approve_at', postgresql.TIMESTAMP(),
                              nullable=True),
                    sa.ForeignKeyConstraint(
                        ['applicant_id'], [USER_FOREKEY_FIELD], onupdate='CASCADE', ondelete='SET NULL'),
                    sa.ForeignKeyConstraint(
                        ['approver_id'], [MANAGER_FOREKEY_FIELD], onupdate='CASCADE', ondelete='SET NULL'),
                    sa.ForeignKeyConstraint(
                        ['org_id'], [ORG_FOREKEY_FIELD], onupdate='CASCADE', ondelete='SET NULL'),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_table('role',
                    sa.Column('id', postgresql.UUID(as_uuid=True), server_default=sa.text(
                        ID_FUNC), nullable=False),
                    sa.Column('created_at', postgresql.TIMESTAMP(),
                              server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
                    sa.Column('updated_at', postgresql.TIMESTAMP(),
                              server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
                    sa.Column('deleted_at', postgresql.TIMESTAMP(),
                              nullable=True),
                    sa.Column('name', postgresql.ENUM('owner', 'manager', 'viewer',
                                                      name='role_name'), server_default='viewer', nullable=False),
                    sa.Column('org_id', postgresql.UUID(
                        as_uuid=True), nullable=False),
                    sa.Column('permission_id', postgresql.UUID(
                        as_uuid=True), nullable=False),
                    sa.ForeignKeyConstraint(
                        ['org_id'], [ORG_FOREKEY_FIELD], onupdate='CASCADE', ondelete='SET NULL'),
                    sa.ForeignKeyConstraint(
                        ['permission_id'], ['permission.id'], onupdate='CASCADE', ondelete='SET NULL'),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('org_id', 'permission_id',
                                        name='uq_role_org_id_permission_id')
                    )
    op.create_table('request_event_log',
                    sa.Column('id', postgresql.UUID(as_uuid=True), server_default=sa.text(
                        ID_FUNC), nullable=False),
                    sa.Column('created_at', postgresql.TIMESTAMP(),
                              server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
                    sa.Column('updated_at', postgresql.TIMESTAMP(),
                              server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
                    sa.Column('deleted_at', postgresql.TIMESTAMP(),
                              nullable=True),
                    sa.Column('req_type', postgresql.ENUM('apply_event', 'publish_event', 'unpublish_event',
                                                          name='req_event_type'), server_default='apply_event', nullable=False),
                    sa.Column('event_id', postgresql.UUID(
                        as_uuid=True), nullable=False),
                    sa.Column('applicant_id', postgresql.UUID(
                        as_uuid=True), nullable=False),
                    sa.Column('approver_id', postgresql.UUID(
                        as_uuid=True), nullable=True),
                    sa.Column('approve_at', postgresql.TIMESTAMP(),
                              nullable=True),
                    sa.ForeignKeyConstraint(
                        ['applicant_id'], [USER_FOREKEY_FIELD], onupdate='CASCADE', ondelete='SET NULL'),
                    sa.ForeignKeyConstraint(
                        ['approver_id'], [MANAGER_FOREKEY_FIELD], onupdate='CASCADE', ondelete='SET NULL'),
                    sa.ForeignKeyConstraint(
                        ['event_id'], ['event.id'], onupdate='CASCADE', ondelete='SET NULL'),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_table('user_role',
                    sa.Column('user_id', postgresql.UUID(
                        as_uuid=True), nullable=False),
                    sa.Column('role_id', postgresql.UUID(
                        as_uuid=True), nullable=False),
                    sa.Column('created_at', postgresql.TIMESTAMP(),
                              server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
                    sa.Column('updated_at', postgresql.TIMESTAMP(),
                              server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
                    sa.Column('deleted_at', postgresql.TIMESTAMP(),
                              nullable=True),
                    sa.ForeignKeyConstraint(
                        ['role_id'], ['role.id'], onupdate='CASCADE', ondelete='SET NULL'),
                    sa.ForeignKeyConstraint(
                        ['user_id'], [USER_FOREKEY_FIELD], onupdate='CASCADE', ondelete='SET NULL'),
                    sa.PrimaryKeyConstraint('user_id', 'role_id')
                    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('user_role')
    op.drop_table('request_event_log')
    op.drop_table('request_org_log')
    op.drop_table('request_member_log')
    op.drop_table('role')
    op.drop_table('ticket_fare')
    op.drop_table('event')
    op.drop_table('organization')
    op.drop_table('user')
    op.drop_table('social')
    op.drop_table('permission')
    op.drop_table('manager')
    op.execute("DROP TYPE org_type")
    op.execute("DROP TYPE role_name")
    op.execute("DROP TYPE req_org_type")
    op.execute("DROP TYPE req_event_type")
    op.execute("DROP TYPE req_member_type")
    # ### end Alembic commands ###
